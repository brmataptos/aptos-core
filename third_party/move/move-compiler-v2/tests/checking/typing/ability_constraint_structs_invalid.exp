// ---- Model Dump
module 0x42::M {
    struct Box {
        f: #0,
    }
    struct Cup {
        f: #0,
    }
    struct NoC {
        dummy_field: bool,
    }
    struct NoK {
        dummy_field: bool,
    }
    struct Pair {
        f1: #0,
        f2: #1,
    }
    struct Sc {
        dummy_field: bool,
    }
    struct Scds {
        dummy_field: bool,
    }
    struct Sk {
        dummy_field: bool,
    }
    private fun c<T>() {
        Tuple()
    }
    private fun cds<T>() {
        Tuple()
    }
    private fun k<T>() {
        Tuple()
    }
    private fun t() {
        M::c<M::NoC>();
        M::c<M::Cup<u64>>();
        M::c<M::Box<M::NoC>>();
        M::k<M::NoK>();
        M::k<M::Cup<u64>>();
        M::k<M::Box<M::Cup<u64>>>();
        M::cds<M::NoC>();
        M::cds<M::Cup<u64>>();
        M::cds<M::Cup<M::NoC>>();
        M::cds<M::Pair<u64, M::NoC>>();
        {
          let M::Sc<M::NoC>{ dummy_field: _ } = pack M::Sc<M::NoC>(false);
          {
            let M::Sc<M::Cup<u64>>{ dummy_field: _ } = pack M::Sc<M::Cup<u64>>(false);
            {
              let M::Sc<M::Box<M::NoC>>{ dummy_field: _ } = pack M::Sc<M::Box<M::NoC>>(false);
              {
                let M::Sk<M::NoK>{ dummy_field: _ } = pack M::Sk<M::NoK>(false);
                {
                  let M::Sk<M::Cup<u64>>{ dummy_field: _ } = pack M::Sk<M::Cup<u64>>(false);
                  {
                    let M::Sk<M::Box<M::Cup<u64>>>{ dummy_field: _ } = pack M::Sk<M::Box<M::Cup<u64>>>(false);
                    {
                      let M::Scds<M::NoC>{ dummy_field: _ } = pack M::Scds<M::NoC>(false);
                      {
                        let M::Scds<M::Cup<u64>>{ dummy_field: _ } = pack M::Scds<M::Cup<u64>>(false);
                        {
                          let M::Scds<M::Cup<M::NoC>>{ dummy_field: _ } = pack M::Scds<M::Cup<M::NoC>>(false);
                          {
                            let M::Scds<M::Pair<u64, M::NoC>>{ dummy_field: _ } = pack M::Scds<M::Pair<u64, M::NoC>>(false);
                            Tuple()
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
    }
    spec fun $c<T>() {
        Tuple()
    }
    spec fun $cds<T>() {
        Tuple()
    }
    spec fun $k<T>() {
        Tuple()
    }
    spec fun $t();
} // end 0x42::M
